#!/usr/bin/env python2
import click
import contextlib
import fnmatch
import glob
import os
import shutil
import subprocess


NAME = os.path.basename(os.getcwd())
DSTDIR = "./tmp"


# (os, architecture, suffix, archive)
ARCHS = [
    ("darwin", "amd64", "osx64", "tgz"),
    ("windows", "amd64", "windows64", "zip"),
    ("linux", "amd64", "linux64", "tgz"),
    ("linux", "arm", "linuxARM", "tgz"),
    ("netbsd", "amd64", "netbsd64", "tgz"),
    ("netbsd", "arm", "netbsdARM", "tgz"),
    ("openbsd", "amd64", "openbsd64", "tgz"),
    ("freebsd", "amd64", "freebsd64", "tgz"),
]


@contextlib.contextmanager
def chdir(newdir):
    curdir = os.getcwd()
    try:
        os.chdir(newdir)
        yield
    finally:
        os.chdir(curdir)


def version():
    print "Installing locally"
    subprocess.call(["go", "install", "./cmd/%s"%NAME])
    p = subprocess.Popen([NAME, "--version"], stderr=subprocess.PIPE)
    return p.communicate()[1].strip()


def build(vers, goos, goarch, suffix, archive):
    basename = "%s-%s-%s"%(NAME, vers, suffix)
    fname = basename + "." + archive
    dstdir = os.path.join(DSTDIR, basename)
    pkgdst = os.path.abspath(os.path.join(DSTDIR, "packages", fname))
    binname = NAME
    if goos == "windows":
        binname = binname + ".exe"

    print "building to ", dstdir
    if os.path.exists(dstdir):
        shutil.rmtree(dstdir)
    os.makedirs(dstdir)

    env = os.environ.copy()
    env["GOOS"] = goos
    env["GOARCH"] = goarch

    subprocess.call(
        [
            "go", "build",
            "-o", os.path.join(dstdir, binname),
            "./cmd/%s"%NAME
        ],
        env = env
    )

    with chdir(DSTDIR):
        if archive == "tgz":
            print "\tmaking .tgz"
            subprocess.Popen(
                ["tar", "-czvf", pkgdst, basename],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            ).communicate()
        elif archive == "zip":
            print "\tmaking .zip"
            subprocess.Popen(
                ["zip", "-r", pkgdst, basename],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            ).communicate()


RICE_EXCLUDE = [
    "./.git"
]

def rice_excluded(root):
    for ex in RICE_EXCLUDE:
        if root.startswith(ex):
            return True


@contextlib.contextmanager
def ricer():
    print("building rice inclusions...")
    for root, _, _ in os.walk("."):
        if rice_excluded(root):
            continue
        with chdir(root):
            p = subprocess.Popen(
                ["rice", "embed-go"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            output = p.communicate()
            p.wait()
            # A successful build if exit code is 0, and stdout is empty
            if p.returncode == 0 and not output[0]:
                print("\t %s"%root)
    print

    yield

    print("\ncleaning rice files...")
    for root, dirs, files in os.walk("."):
        for basename in files:
            if basename.endswith("rice-box.go"):
                    filename = os.path.join(root, basename)
                    print("\t %s"%filename)
                    os.unlink(filename)



@click.command()
@click.option("--arch", default=None, help="Build just this architecture")
def main(arch):
    v = version()
    print "Version is: ", v
    subprocess.call(["mkdir", "-p", os.path.join(DSTDIR, "packages")])
    print

    archs = ARCHS
    if arch:
        archs = [i for i in ARCHS if arch in i]

    with ricer():
        for i in archs:
            build(v, *i)



if __name__ == "__main__":
    main()
